" YouCompleteMe {{{
    Plugin 'Valloric/YouCompleteMe'

    let g:ycm_autoclose_preview_window_after_completion=1
    let g:ycm_key_invoke_completion='<C-Space>'
    nnoremap <Leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
    let g:ycm_python_binary_path='python'
    let g:ycm_filepath_completion_use_working_dir = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_use_ultisnips_completer = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_seed_identifiers_with_syntax=1
    let g:ycm_min_num_of_chars_for_completion=1
    let g:ycm_goto_buffer_command = 'horizontal-split'
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif
    if !exists("g:ycm_semantic_triggers")
        let g:ycm_semantic_triggers = {}
    endif
    let g:ycm_semantic_triggers =  {
                \   'c' : ['->', '.'],
                \   'objc' : ['->', '.'],
                \   'ocaml' : ['.', '#'],
                \   'cpp,objcpp' : ['->', '.', '::'],
                \   'perl' : ['->'],
                \   'php' : ['->', '::', '"', "'", 'use ', 'namespace ', '\'],
                \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
                \   'html': ['<', '"', '</', ' '],
                \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
                \   'ruby' : ['.', '::'],
                \   'lua' : ['.', ':'],
                \   'erlang' : [':'],
                \   'haskell' : ['.', 're!.']
                \ }
    let python_highlight_all=1
" }}}
" nerdtree  {{{
    Plugin 'scrooloose/nerdtree'
    Plugin 'jistr/vim-nerdtree-tabs'
    Plugin 'Xuyuanp/nerdtree-git-plugin'
    nmap <Leader>f :NERDTreeToggle<CR>
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    let NERDTreeShowLineNumbers=1
    let NERDTreeMinimalUI=1
    let NERDTreeAutoCenter=0
    let NERDTreeShowHidden=1
    let NERDTreeWinSize=31
    let NERDTreeShowBookmarks=1
    let NERDTreeMouseMode=2
    let NERDTreeIgnore=['\.pyc$', '\~$']
    let NERDTreeShowHidden=1
    let NERDTreeAutoDeleteBuffer=1
    let g:nerdtree_tabs_open_on_console_startup=1
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : ">",
        \ "Staged"    : "+",
        \ "Untracked" : "-",
        \ "Renamed"   : "$",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "x",
        \ "Dirty"     : "*",
        \ "Clean"     : "✔︎",
        \ "Unknown"   : "?"
        \ }
" }}}
" syntastic {{{
    Plugin 'nvie/vim-flake8'
    Plugin 'w0rp/ale'
    let g:ale_sign_column_always = 1
    let b:ale_linters = ['flake8', 'pylint']
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
" }}}
" taglist {{{
    Plugin 'vim-scripts/taglist.vim'
    let Tlist_Use_Right_Window=1
    let Tlist_File_Fold_Auto_Close=1
    let Tlist_Exit_OnlyWindow=1
    let Tlist_WinWidth=32
    let Tlist_Ctags_Cmd='/usr/bin/ctags'
    " let Tlist_Auto_Open=1
" }}}
" vim-fugitive {{{
    Plugin 'tpope/vim-fugitive'
    nmap <Leader>s :Gblame<CR>
" }}}
" {{{
	Plugin 'dyng/ctrlsf.vim'
	nnoremap <C-f> :CtrlSF<Space>
" }}}
" other {{{
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'tmhedberg/SimpylFold'
    Plugin 'vim-scripts/indentpython.vim'
    Plugin 'kien/ctrlp.vim'
    " airline 状态栏
    " 需要安装补丁字体 powerline/fonts
    set laststatus=2
    " set t_Co=256
    let g:airline_powerline_fonts=1
    let g:airline_theme='cool'
    "let g:airline_left_sep='>'
    let g:nerdtree_tabs_open_on_gui_startup=1
    " 自动折叠插件 SimpylFold
    let g:SimpyFold_docstring_preview=1        " 显示折叠代码的文档字符串
" }}}

call plug#begin('~/.local/share/nvim/plugged')

" {{{

	Plug 'ncm2/ncm2'
    Plug 'roxma/nvim-yarp'

    " enable ncm2 for all buffers
    autocmd BufEnter * call ncm2#enable_for_buffer()

    " IMPORTANTE: :help Ncm2PopupOpen for more information
    set completeopt=noinsert,menuone,noselect

    " NOTE: you need to install completion sources to get completions. Check
    " our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
    Plug 'ncm2/ncm2-bufword'
    Plug 'ncm2/ncm2-tmux'
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-jedi'

    " suppress the annoying 'match x of y', 'The only match' and 'Pattern not
    " found' messages
	let g:python_host_prog='/home/wen/.pyenv/versions/neovim2/bin/python'
	let g:python3_host_prog='/home/wen/.pyenv/versions/neovim3/bin/python'

	set shortmess+=c

	au User Ncm2Plugin call ncm2#register_source({
			\ 'name' : 'css',
			\ 'priority': 9, 
			\ 'subscope_enable': 1,
			\ 'scope': ['css','scss'],
			\ 'mark': 'css',
			\ 'word_pattern': '[\w\-]+',
			\ 'complete_pattern': ':\s*',
			\ 'on_complete': ['ncm2#on_complete#omni', 'csscomplete#CompleteCSS'],
			\ })

" {{{
" nerdtree {{{
    Plug 'scrooloose/nerdtree'
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'Xuyuanp/nerdtree-git-plugin'
	autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    let NERDTreeShowLineNumbers=1
    let NERDTreeMinimalUI=1
    let NERDTreeAutoCenter=0
    let NERDTreeShowHidden=0
    let NERDTreeWinSize=31
    let NERDTreeShowBookmarks=1
    let NERDTreeMouseMode=2
    let NERDTreeIgnore=['\.pyc$', '\~$']
    let NERDTreeShowHidden=1
    let NERDTreeAutoDeleteBuffer=1
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : ">",
        \ "Staged"    : "+",
        \ "Untracked" : "-",
        \ "Renamed"   : "$",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "x",
        \ "Dirty"     : "*",
        \ "Clean"     : "✔︎",
        \ "Unknown"   : "?"
        \ }
" }}}

" }}}
" other {{{
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'tmhedberg/SimpylFold'
    Plug 'vim-scripts/indentpython.vim'
    Plug 'kien/ctrlp.vim'
    set laststatus=2
    " set t_Co=256
    let g:airline_powerline_fonts=1
    let g:airline_theme='cool'
    "let g:airline_left_sep='>'
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:SimpyFold_docstring_preview=1
" }}}

" vim-fugitive {{{
    Plug 'tpope/vim-fugitive'
" }}}

" neomake {{{
	Plug 'neomake/neomake'
	let g:neomake_python_enabled_makers = ['flake8']

" }}}
" {{{
	" 搜索
    Plug 'dyng/ctrlsf.vim'
	" 快速注释
    Plug 'scrooloose/nerdcommenter'
" }}}
" {{{
    Plug 'nvie/vim-flake8'
    Plug 'w0rp/ale'
    let g:ale_sign_column_always = 1
    let b:ale_linters = ['flake8', 'pylint']
" }}}

call plug#end()

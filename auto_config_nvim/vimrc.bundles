call plug#begin('$HOME/.config/nvim/plugged')

" Auto Complete {{{

    Plug 'ncm2/ncm2'
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2-github'
    Plug 'ncm2/ncm2-bufword'
    " Plug 'ncm2/ncm2-jedi'
    Plug 'ncm2/ncm2-path'
    Plug 'ncm2/ncm2-markdown-subscope'
    Plug 'ncm2/ncm2-tmux'
    Plug 'ncm2/ncm2-html-subscope'
    Plug 'ncm2/ncm2-tern',  {'do': 'npm install'}

    " enable ncm2 for all buffers
    autocmd BufEnter * call ncm2#enable_for_buffer()

    " IMPORTANTE: :help Ncm2PopupOpen for more information
    set completeopt=noinsert,menuone,noselect

    " suppress the annoying 'match x of y', 'The only match' and 'Pattern not
    " found' messages
    " let g:python_host_prog=$HOME."/.pyenv/versions/neovim2/bin/python"
    " let g:python3_host_prog=$HOME."/.pyenv/versions/neovim3/bin/python"

    let g:python_host_prog="/usr/bin/python"
    let g:python3_host_prog="/usr/bin/python3"

    set shortmess+=c
    inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

    " Use <TAB> to select the popup menu:
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    let ncm2#popup_delay = 5
    let ncm2#complete_length = [[1, 1]]

" }}}

" nerdtree {{{
    Plug 'scrooloose/nerdtree'
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    nmap <Leader>f :NERDTreeToggle<CR>
    let NERDTreeShowLineNumbers=1
    let NERDTreeMinimalUI=1
    let NERDTreeAutoCenter=0
    let NERDTreeShowHidden=0
    let NERDTreeWinSize=31
    let NERDTreeShowBookmarks=1
    let NERDTreeMouseMode=2
    let NERDTreeIgnore=['\.pyc$', '\~$', '\.idea', '__pycache__', '\.git$', '\.mp4$']
    let NERDTreeShowHidden=1
    let NERDTreeAutoDeleteBuffer=1
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Modified"  : ">",
        \ "Staged"    : "+",
        \ "Untracked" : "-",
        \ "Renamed"   : "$",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "x",
        \ "Dirty"     : "*",
        \ "Clean"     : "✔︎",
        \ "Unknown"   : "?"
        \ }
" }}}
" {{{ undo
    Plug 'mbbill/undotree'
    nnoremap <F5> :UndotreeToggle<cr>
    if has("persistent_undo")
        set undodir=$HOME/.undodir
        set undofile
    endif
" }}}
" {{{
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
    nmap <C-b> :LeaderfMru<cr>
    "nmap <leader>m :LeaderfFunction!<cr>
" }}}

" python {{{

    Plug 'vim-scripts/indentpython.vim', { 'for' :['python', 'vim-plug'] }
    Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins', 'for' :['python', 'vim-plug']  }
    Plug 'neomake/neomake'
    Plug 'nvie/vim-flake8'
    Plug 'w0rp/ale'
    Plug 'tell-k/vim-autopep8'
    let g:neomake_python_enabled_makers = ['flake8']
    " let g:autopep8_on_save = 0
    let g:autopep8_disable_show_diff=1
    autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

    let g:flake8_max_line_length = 120

    let g:ale_sign_column_always = 1
    let b:ale_linters = ['flake8']
    nmap sp <Plug>(ale_previous_wrap)
    nmap sn <Plug>(ale_next_wrap)
    Plug 'Yggdroot/indentLine'
    let g:indent_guides_guide_size            = 1  " 指定对齐线的尺寸
    let g:indent_guides_start_level           = 2  " 从第二层开始可视化显示缩进

" }}}

" other {{{  状态栏
"
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " " 折叠
    Plug 'tmhedberg/SimpylFold'
    Plug 'kien/ctrlp.vim'
    let g:ale_sign_column_always = 1
    set laststatus=2
    " set t_Co=256
    " let g:airline_powerline_fonts=1
    let g:airline_theme='cool'
    let g:airline_left_sep='>'
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:SimpyFold_docstring_preview=1
" }}}

" vim-fugitive {{{  git log
    Plug 'tpope/vim-fugitive'
    nmap <Leader>a :Gblame<CR>
" }}}

" {{{
    " 搜索 全局搜索
    Plug 'dyng/ctrlsf.vim'
    nmap <C-f> :CtrlSF<Space>
" }}}
" {{{ Bookmarks  标签
    " Plug 'kshenoy/vim-signature'
    " let g:SignatureMap = {
    "     \ 'Leader'             :  "z",
    "     \ 'PlaceNextMark'      :  "m,",
    "     \ 'ToggleMarkAtLine'   :  "m.",
    "     \ 'PurgeMarksAtLine'   :  "dm-",
    "     \ 'DeleteMark'         :  "dm",
    "     \ 'PurgeMarks'         :  "dm/",
    "     \ 'PurgeMarkers'       :  "dm?",
    "     \ 'GotoNextLineAlpha'  :  "m<LEADER>",
    "     \ 'GotoPrevLineAlpha'  :  "",
    "     \ 'GotoNextSpotAlpha'  :  "m<LEADER>",
    "     \ 'GotoPrevSpotAlpha'  :  "",
    "     \ 'GotoNextLineByPos'  :  "",
    "     \ 'GotoPrevLineByPos'  :  "",
    "     \ 'GotoNextSpotByPos'  :  "mn",
    "     \ 'GotoPrevSpotByPos'  :  "mp",
    "     \ 'GotoNextMarker'     :  "",
    "     \ 'GotoPrevMarker'     :  "",
    "     \ 'GotoNextMarkerAny'  :  "",
    "     \ 'GotoPrevMarkerAny'  :  "",
    "     \ 'ListLocalMarks'     :  "m/",
    "     \ 'ListLocalMarkers'   :  "m?"
    "     \ }

    " Plug 'mileszs/ack.vim'
    " Plug 'zxqfl/tabnine-vim'

" {{{ vim-wakatime  about https://wakatime.com/vim
    Plug 'wakatime/vim-wakatime'
" }}}

" {{{
    Plug 'mattn/emmet-vim'
	" 自动引号&括号补全
    Plug 'jiangmiao/auto-pairs'
    " 快速注释
    Plug 'scrooloose/nerdcommenter'
    " python函数跳转
    " Plug 'davidhalter/jedi-vim'
    " let g:jedi#completions_enabled = 0  " 不使用自动补全
    " let g:jedi#use_splits_not_buffers = "winwidth" " 打开窗口在top left right bottom
    " " let g:jedi#goto_definitions_command = ""  " 默认的 <leader>s 键和vim-fugitive的键冲突，所以不设置
    " let g:jedi#popup_on_dot = 0
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " if hidden is not set, TextEdit might fail.
    set hidden
    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " Or use `complete_info` if your vim support it, like:
    " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    " Remap keys for gotos
    nmap <leader>g <Plug>(coc-definition)
    nmap <leader>r <Plug>(coc-references)

    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    " xmap <leader>f  <Plug>(coc-format-selected)
    " nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    " xmap <leader>a  <Plug>(coc-codeaction-selected)
    " nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    " nmap <leader>qf  <Plug>(coc-fix-current)

    " Create mappings for function text object, requires document symbols feature of languageserver.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
" }}}
" {{{ 样式
    Plug 'mhartington/oceanic-next'
    let g:airline_theme='oceanicnext'

    " Theme
    syntax enable

" }}}

" {{{
    Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'branch': 'release/1.x',
      \ 'for': [
        \ 'javascript',
        \ 'typescript',
        \ 'css',
        \ 'less',
        \ 'scss',
        \ 'json',
        \ 'graphql',
        \ 'markdown',
        \ 'vue',
        \ 'lua',
        \ 'php',
        \ 'python',
        \ 'ruby',
        \ 'html',
        \ 'swift' ] }
" }}}

call plug#end()
